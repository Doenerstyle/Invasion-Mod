buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath ('com.anatawa12.forge:ForgeGradle:1.2-1.1.+') {
            changing = true
        }
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

apply plugin: 'forge'

version = mod_version
group = package_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${mod_name}-${mc_version}"

import org.ajoberstar.grgit.Grgit

repositories {
    maven { url "http://mobiusstrip.eu/maven"}    // Waila
    maven { url "https://cursemaven.com"}         // CurseMaven
    maven { url "https://maven.covers1624.net/" } // new NEI
}

dependencies {
    //compile "mcp.mobius.waila:Waila:${waila_version}_${mc_version}"
    compile "curse.maven:waila-73488:2230518"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.7.48:dev"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.3.141:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
    compile fileTree(dir: 'libs', include: '*.jar')
}

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    runDir = "eclipse"
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
